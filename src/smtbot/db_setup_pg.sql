CREATE SCHEMA IF NOT EXISTS %SCHEMA% AUTHORIZATION CURRENT_USER;

CREATE TABLE IF NOT EXISTS %SCHEMA%.REQUEST (
	REQ_ID VARCHAR(100) PRIMARY KEY,
	USER_NAME VARCHAR(100) NOT NULL,
	EXECUTION_RETRIES INTEGER,
	OPEN_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	ACTION VARCHAR(100) NOT NULL,
	PARAMETERS TEXT,
	STATUS CHAR(1) DEFAULT 'N' NOT NULL,
	SCHEDULE_NAME VARCHAR(100),
	RETRY_INTERVAL INTEGER,
	EXECUTION_MODE VARCHAR(60),
	LOCKED_BY VARCHAR(100),
	LOCK_TIME TIMESTAMP,
	ATTEMPT INTEGER DEFAULT 1,
	NEXT_RUN TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	EXPIRE_AT TIMESTAMP,
	SERVICE VARCHAR(100),
	SUBJECT VARCHAR(60),
	TAG VARCHAR(100)
	
);

CREATE UNIQUE INDEX IF NOT EXISTS REQUEST_PK ON %SCHEMA%.REQUEST (REQ_ID);
CREATE INDEX IF NOT EXISTS REQUEST_STSCHED ON %SCHEMA%.REQUEST(STATUS,SCHEDULE_NAME );
CREATE INDEX IF NOT EXISTS REQUEST_LOCKED ON %SCHEMA%.REQUEST(LOCKED_BY,LOCK_TIME);

CREATE TABLE IF NOT EXISTS %SCHEMA%.RESPONCE (
	RES_REQ_ID VARCHAR(100)  REFERENCES %SCHEMA%.request On delete cascade,
	RESULT TEXT,
	CLOSE_TIME TIMESTAMP,
	RES_STATUS INTEGER,
    FINISHED VARCHAR(2),
	CONSTRAINT RESPONCE_PK PRIMARY KEY (RES_REQ_ID)
);
CREATE UNIQUE INDEX IF NOT EXISTS RESPONCE_PK ON %SCHEMA%.RESPONCE (RES_REQ_ID);

CREATE TABLE IF NOT EXISTS %SCHEMA%.ATTACHMENT (
	ATT_ID VARCHAR(100)  PRIMARY KEY,
	ATT_REQ_ID VARCHAR(100)  REFERENCES %SCHEMA%.request on delete cascade,
	SIZE INTEGER,
	NAME VARCHAR(100)  NOT NULL,
	CONTENT_TYPE VARCHAR(100),
	BODY bytea,
	STATUS INTEGER,
	CP_TIME TIMESTAMP
);
CREATE UNIQUE INDEX IF NOT EXISTS ATTACHEMENT_PK ON %SCHEMA%.ATTACHMENT (ATT_ID);
CREATE INDEX IF NOT EXISTS ATT_REQ_ID ON %SCHEMA%.ATTACHMENT (ATT_REQ_ID);

CREATE TABLE IF NOT EXISTS %SCHEMA%.USER (
	NAME VARCHAR(60) NOT NULL,
	PASSWORD VARCHAR(250),
	TOC VARCHAR(250),
	EXPIRE_AT TIMESTAMP,
	CONSTRAINT USER_PK PRIMARY KEY (NAME)
);
CREATE UNIQUE INDEX IF NOT EXISTS USER_PR ON %SCHEMA%.USER (NAME);

CREATE TABLE IF NOT EXISTS %SCHEMA%.BOTUSER (
	ID VARCHAR(60) NOT NULL,
	SMKEY VARCHAR(250) NOT NULL,
	ROLE VARCHAR(30), 
	STATUS VARCHAR(10) NOT NULL,
	LAST_ACCESS TIMESTAMP, 
	EXPIRE_AT TIMESTAMP,
	UPDATE_AT TIMESTAMP,
	CONSTRAINT BOTUSER_PK PRIMARY KEY (ID)
);

CREATE UNIQUE INDEX IF NOT EXISTS BOTUSER_PR ON %SCHEMA%.BOTUSER (ID);
CREATE UNIQUE INDEX IF NOT EXISTS BOTUSER_SMKEY ON %SCHEMA%.BOTUSER (SMKEY);

CREATE TABLE IF NOT EXISTS %SCHEMA%.MESSAGE (
	ID VARCHAR(100) NOT NULL,
	URL VARCHAR(512) NOT NULL,
	METHOD VARCHAR(10) NOT NULL,
	HEADERS TEXT,
	BODY TEXT,
	ATTEMPT INTEGER,
	RETRY_INTERVAL INTEGER,
	USER_NAME VARCHAR(100) NOT NULL,
	NEXT_RUN TIMESTAMP NOT NULL,
	LOCKED_BY VARCHAR(100),
	LOCK_TIME TIMESTAMP,
	CONSTRAINT MESSAGE_PK PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX  IF NOT EXISTS PRIMARY_KEY_13 ON %SCHEMA%.MESSAGE (ID);
CREATE INDEX IF NOT EXISTS MESSAGE_LOCKEDBY ON %SCHEMA%.MESSAGE(LOCKED_BY);

CREATE TABLE IF NOT EXISTS %SCHEMA%.MESSAGE_LOG (
	MES_ID VARCHAR(100) PRIMARY KEY,
	URL VARCHAR(512) NOT NULL,
	ATTEMPT INTEGER,
	DELIVERY_TIME TIMESTAMP,
	STATUS INTEGER,
	BODY TEXT
);
CREATE UNIQUE INDEX  IF NOT EXISTS MESSAGE_LOG_PK ON %SCHEMA%.MESSAGE_LOG (MES_ID);

CREATE TABLE IF NOT EXISTS  %SCHEMA%.HOOK (
	USER_NAME VARCHAR(100) not null,
	NAME VARCHAR(100) not null,
	HEADERS TEXT,
	METHOD VARCHAR(20) DEFAULT 'post',
	BODY TEXT,
	MAX_RETRIES INTEGER,
	RETRY_INTERVAL INTEGER,
	URL VARCHAR(512) NOT null,
	CONSTRAINT HOOK_PK PRIMARY KEY (USER_NAME,NAME)
);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_E ON  %SCHEMA%.HOOK (USER_NAME,NAME);


CREATE TABLE IF NOT EXISTS  %SCHEMA%.BOTCACHE (
	CALLBACK VARCHAR(30) not null,
	ITEM_KEY VARCHAR(100) not null,
    ITEM_JSON TEXT, 
	EXPIRE_AT TIMESTAMP, 
	CONSTRAINT BOTCACHE_PK PRIMARY KEY (CALLBACK,ITEM_KEY)
);

CREATE UNIQUE INDEX IF NOT EXISTS BOTCACHE_PK ON  %SCHEMA%.BOTCACHE (CALLBACK,ITEM_KEY);
